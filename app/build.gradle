def versionMajor = 2
def versionMinor = 2
def versionPatch = 3
def versionBuild = 0

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt' // Use experimental kapt implementation
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply from: '../ktlint.gradle'


def gitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

def gitTimestamp() {
    def p = 'git log -n 1 --format=%at'.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}


android {

    compileSdkVersion versions.compileSdk
    defaultConfig {
        applicationId "net.kelmer.correostracker"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
        buildConfigField 'long', 'GIT_TIMESTAMP', "${gitTimestamp()}L"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }

    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            resValue("string", "PORT_NUMBER", "8081")
        }
        release {

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildToolsVersion = '29.0.3'

    buildFeatures {
        viewBinding true
    }

    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
}

dependencies {

    //Kotlin
    implementation deps.kotlin
    //==================== Support Library ====================
    implementation deps.support.appCompat
    implementation deps.support.design
    implementation deps.support.fragment
    implementation deps.support.constraint
    implementation deps.support.vector
    implementation deps.support.cardview

    implementation 'com.google.android.play:core:1.10.2'
    implementation 'com.google.android.play:core-ktx:1.8.1'

    //==================== Network ====================
    implementation deps.okhttp.logger
    implementation deps.retrofit.core
    implementation deps.retrofit.moshi
    implementation deps.retrofit.rxjava

    //lifecycle
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.viewmodel
    implementation deps.lifecycle.worker

    implementation deps.navigation.fragment
    implementation deps.navigation.ui
    kapt deps.lifecycle.compiler


    //Room
    implementation deps.room.runtime
    androidTestImplementation deps.room.testing
    implementation deps.room.rx
    kapt deps.room.compiler

    //Rx
    implementation deps.rx.android
    implementation deps.rx.kotlin


    implementation deps.moshi.core
    implementation deps.moshi.adapters

    //TimelineView for detail
    implementation 'com.github.vipulasri:timelineview:1.0.6'

    // Check for v11.4.2 or higher
    implementation 'com.google.firebase:firebase-core:20.0.0'

    // (Recommended) Add Analytics
    implementation 'com.google.firebase:firebase-crashlytics:18.2.5'
    implementation 'com.google.firebase:firebase-analytics:20.0.0'

    // Add dependency

    //DI
    implementation deps.daggerhilt.android
    kapt deps.daggerhilt.android_compiler
    kapt deps.daggerhilt.compiler
    implementation deps.daggerhilt.viewmodel

    //Barcode scanner
    implementation deps.barcode.zxing
    implementation deps.barcode.zxingandroid

    //==================== Debug ====================
    //Logging
    implementation deps.timber
    implementation deps.stetho.core
    implementation deps.stetho.okhttp3

    //Test
    testImplementation deps.junit
    testImplementation deps.espresso.core
    testImplementation deps.espresso.contrib
    testImplementation deps.mockito

    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.junit
    androidTestImplementation deps.atsl.core
    androidTestImplementation deps.atsl.rules


    androidTestImplementation deps.daggerhilt.test
    testImplementation deps.daggerhilt.test
    kaptAndroidTest deps.daggerhilt.android_compiler

}

apply plugin: 'com.google.gms.google-services'
check.dependsOn ktlint
